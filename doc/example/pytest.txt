
py.test and tox 
=================================

It is easy to integrate `py.test`_ runs with tox.  If you encounter 
issues, please check if they are `listed as a known issue`_ and/or use 
the :doc:`support channels <../support>`. 

Basic example
--------------------------

Assuming the following layout::

    tox.ini      # see below for content
    setup.py     # a classic distutils/setuptools setup.py file 

and the following ``tox.ini`` content::

    [testenv]
    deps=py           # PYPI package providing py.test
    commands=
      py.test \
            []        # substitute with tox' positional arguments 
    [testenv:py26]
    basepython=python2.6
    [testenv:py31]
    basepython=python3.1

you can invoke ``tox`` in the directory where your ``tox.ini`` resides. 
``tox`` will sdist-package your project create two virtualenv environments 
with the ``python2.6`` and ``python3.1`` interpreters, respectively, and will
then run the specified test command. 

Extended example: change dir before test and use per-virtualenv tempdir
--------------------------------------------------------------------------

Assuming the following layout::

    tox.ini      # see below for content
    setup.py     # a classic distutils/setuptools setup.py file 
    tests        # the directory containing tests 

and the following ``tox.ini`` content::

    [testenv]
    changedir=tests   
    deps=py      
    commands=
      py.test \
        --basetemp={envtmpdir}  \ # py.test uses the per-virtualenv temp dir 
        []                      # substitute with tox' positional arguments 
    [testenv:py26]
    basepython=python2.6
    [testenv:py31]
    basepython=python3.1

you can invoke ``tox`` in the directory where your ``tox.ini`` resides. 
Differently than in the previous example the ``py.test`` command 
will be executed with a current working directory set to ``tests``
and the test run will use the per-virtualenv temporary directory. 

.. _`passing positional arguments`: 

Avoiding __init__.py files in test directories 
---------------------------------------------------

.. _`fully qualified name`: http://codespeak.net/py/dist/test/customize.html#constructing-the-package-name-for-test-modules

``py.test`` collects test modules on the filesystem and then 
tries to import them under their `fully qualified name`_. This means
that if your test directory contains an ``__init__.py`` file then your
``py.test`` invocation may end up importing the package from
the checkout directory rather than the installed package.  Therefore
it is better to try to avoid ``__init__.py`` files in test 
directories and also try to avoid custom ``PYTHONPATH`` settings.  
After all, it is the job of your ``setup.py`` file and the install 
tools to care for making the package properly available for importing. 

Using multiple CPUs for test runs
-----------------------------------

``py.test`` supports distributing tests to multiple processes and hosts 
through the `pytest-xdist`_ plugin.  Here is an example configuration 
to make ``tox`` use this feature::

    [testenv]
    deps=pytest-xdist 
    changedir=tests   
    commands=
        py.test \
            --basetemp={envtmpdir}  \
            --confcutdir=..         \
            -n 3                    \ # use three sub processes
            []

Using tox, py.test and the Hudson CI 
-------------------------------------------

The Hudson_ continous integration server allows to define "jobs" with 
"build steps" which can be test invocations.  If you :doc:`install <../install>` ``tox`` on your
default Python installation on each Hudson slave, you can easily create 
a Hudson multi-configuration job that will drive your tox runs from the CI-server side,
using these steps: 

* create a "multi-configuration" job, give it a name of your choice 
* configure your repository so that Hudson can pull it 
* (optional) configure multiple nodes so that tox-runs are performed
  on multiple hosts 
* configure ``axes`` with e.g. using ``ENV`` as an axis name and as values
  the space-separated test environment names you want Hudson/tox to execute
  sequentially. 
* add a Python-build step with this content::

    import tox
    import os
    tox.cmdline(["-e", os.environ['ENV'])

* check ``Publish JUnit test result report`` and enter
  ``**/junit-*.xml`` as the pattern so that Hudson collects 
  test results. 

It makes sense to use something like the following configuration
for your ``commands`` parameter in a ``tox.ini``::

    commands=
        py.test \
            --confcutdir=.. \  # Hudson has nested project checkouts and this option 
                               # lets py.test avoid see conflicting conftest.py files 
            --junitxml=junit-{envname}.xml

**Note** that we do not use the per-virtualenv ``--basetemp`` setting here because
it can easily lead to too long filenames because Hudson creates a deeply nested
directory structure for the workspaces of the jobs it runs. 

See a real-life example in action with the `py-trunk-multi Hudson job`_

.. _`py-trunk-multi Hudson job`: http://hudson.testrun.org/view/pytest/job/py-trunk-multi/

.. _`listed as a known issue`:

Known Issues and limitations 
-----------------------------

* you may encounter "too long filenames" for temporarily
  created files in your py.test run.  Try to not use the "--basetemp" parameter. 

.. include:: ../links.txt
