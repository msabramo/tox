
py.test and tox 
=================================

.. _`py.test`: http://pytest.org 

It is easy to integrate `py.test`_ runs with tox.  If you encounter 
issues, please check if they are `listed as a known issue`_ and/or use 
the :doc:`support channels <../support>`. 

Basic py.test example for "extra" test directories 
--------------------------------------------------------------

Assuming you have your tests in the ``tests`` directory (relative 
to the location of the ``tox.ini`` file) the following test-config 
will change to it and then run the ``py.test`` command as specified::

    [testenv]
    changedir=tests   
    argv=
        py.test 
        --basetemp={envtmpdir}  # have py.test use the per-virtualenv temp dir 
        --confcutdir=..         # stop looking for conftest files at parent dir

Apart from invoking ``tox`` plainly you may also invoke it like this::

    tox tests/test_something.py 

The command line positional argument will be appended to the ``argv`` above so 
that you can use ``tox`` to trigger testing of a particular test file. 


Using multiple CPUs for test runs
-----------------------------------

``py.test`` supports distributing tests to multiple processes and hosts 
through the `pytest-xdist`_ plugin.  Here is an example configuration 
to make ``tox`` use this feature::

    [testenv]
    deps=pytest-xdist 
    changedir=tests   
    argv=
        py.test 
        --basetemp={envtmpdir}  # use the per-virtualenv temp dir 
        --confcutdir=..         # stop looking for conftest files at parent dir
        -n 3                    # use three sub processes

.. _`pytest-xdist`: http://codespeak.net/py/dist/test/plugin/xdist.html

Using tox, py.test and the Hudson CI 
-------------------------------------------

The Hudson_ continous integration server allows to define "jobs" with 
"build steps" which can be test invocations.  If you :doc:`install <../install>` ``tox`` on your
default Python installation on each slave, you can then have a 
Hudson test build step invoke tox from a Python script like this::

    import tox
    tox.cmdline()

It makes sense to use something like the following configuration
for your ``argv`` parameter::

    argv=
        py.test 
        --confcutdir=.
        --basetemp={envtmpdir}
        --junitxml=junit-{envname}.xml
   
and then configure your Hudson job to collect "JUnit test results" with the ``**/junit-*.xml`` pattern. 

For a real-life example see `py.test own Hudson job configuration`_. This actually
uses a "Parametrized Hudson build" which provides a nice configuration matrix 
and lets ``tox`` handle all the underlying work of preparing and running things. 

.. _`py.test own Hudson job configuration`: http://hudson.testrun.org/view/pytest/job/pytest-multi/configure
.. _`Hudson`: http://hudson-ci.org/

.. _`listed as a known issue`:

Known Issues and limitations 
-----------------------------

* tox does not work on the Windows/Python3/Virtualenv3 combination due to limitations of the virtualenv3 project  
* on Windows you may encounter "too long filenames" for temporarily
  created files in your py.test run.  Try to not use the "--basetemp" parameter. 
* If you have a test layout where your test files are subdirectories of
  your Python package then you will run your tests against the source package
  and not the installed version.  
