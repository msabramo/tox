General tips and tricks 
================================

Interactively passing positional arguments 
-----------------------------------------------

If you invoke ``tox`` like this::

    tox -- -x tests/test_something.py 

the arguments after the `--` will be substituted 
everywhere where you specify ``[...]`` in your
test commands, for example using ``py.test``::
    
    # in the testenv or testenv:NAME section of your tox.ini 
    commands =
        py.test []

or using ``nosetests``::

    commands = 
        nosetests []

the above ``tox`` invocation will trigger the test runners to 
stop after the first failure and to only run a particular test file. 


Integrating "sphinx" documentation checks
----------------------------------------------

In a ``testenv`` environment you can specify any command and 
thus you can easily integrate sphinx_ documentation integrity during 
a tox test run.  Here is an example ``tox.ini`` configuration::

    [testenv:docs]
    basepython=python
    changedir=doc
    deps=sphinx
    commands=
        sphinx-build -W -b html -d {envtmpdir}/doctrees .  {envtmpdir}/html

This will create a dedicated ``docs`` virtual environment and install
the ``sphinx`` dependency which itself will install the ``sphinx-build`` tool 
which you can then use as a test command.  Note that sphinx output is redirected
to the virtualenv environment temporary directory to prevent sphinx 
from caching results between runs.  

You can now call::

    tox 

which will make the sphinx tests part of your test run. 

Integrating "sphinx" documentation checks in a Hudson job
----------------------------------------------------------------

If you are using a multi-configuration Hudson job which collects
JUnit Test results you will run into problems using the previous
method of running the sphinx-build command because it will not
generate JUnit results.  To accomodate this issue one solution
is to have ``py.test`` wrap the sphinx-checks and create a 
JUnit result file which wraps the result of calling sphinx-build. 
Here is an example: 

1. create a ``docs`` environment in your ``tox.ini`` file like this::

    [testenv:docs]
    basepython=python
    changedir=doc # or whereever you keep your sphinx-docs 
    deps=sphinx
        py
    commands=
        py.test --tb=line -v --junitxml=junit-{envname}.xml check_sphinx.py

2. create a ``doc/check_sphinx.py`` file like this::

    import py
    import subprocess
    def test_linkcheck(tmpdir):
        doctrees = tmpdir.join("doctrees")
        htmldir = tmpdir.join("html")
        subprocess.check_call(
            ["sphinx-build", "-W", "-blinkcheck",
              "-d", str(doctrees), ".", str(htmldir)])
    def test_build_docs(tmpdir):
        doctrees = tmpdir.join("doctrees")
        htmldir = tmpdir.join("html")
        subprocess.check_call([
            "sphinx-build", "-W", "-bhtml",
              "-d", str(doctrees), ".", str(htmldir)])

3. run ``tox -e docs`` and then you may integrate this environment 
   along with your other environments into Hudson. 

Note that ``py.test`` is only installed into the docs environment
and does not need to be in use or installed with any other environment. 

Selecting one or more environments to run tests against
--------------------------------------------------------

Using the ``-e ENV[,ENV2,...]``  option you explicitely list 
the environments where you want to run tests against. For
example, given the previous sphinx example you may call::

    tox -e docs

which will make ``tox`` only manage the ``docs`` environment
and call its test commands.  You may specify more than 
one environment like this::

    tox -e py25,py26 

which would run the commands of the ``py25`` and ``py26`` testenvironments 
respectively. 

.. include:: ../links.txt

